import {
  SignedIn,
  SignedOut,
  SignInButton,
  UserButton,
  useUser,
} from "@clerk/nextjs";
import Head from "next/head";

import { api } from "~/utils/api";

import LoadingSpinner, { LoadingPage } from "~/components/loading";
import { useState } from "react";
import toast from "react-hot-toast";
import PageLayout from "~/components/PageLayout";
import relativeTime from "dayjs/plugin/relativeTime";
import dayjs from "dayjs";
import PostView from "~/components/postView";
dayjs.extend(relativeTime);

const CreatePostWizard = () => {
  const [emoji, setEmoji] = useState("");
  const { user } = useUser();
  if (!user) {
    return null;
  }

  const ctx = api.useContext();

  const { mutate, isPending: isPosting } = api.post.create.useMutation({
    onSuccess: () => {
      setEmoji("");
      void ctx.post.getAll.invalidate();
    },
    onError: (e) => {
      const errMessage = e.data?.zodError?.fieldErrors;
      toast.error(errMessage?.content[0] || "Failed to post emoji");
    },
  });
  console.log("user", user);
  return (
    <div className="flex flex-col items-start">
      <div className="flex w-full items-center justify-between gap-3 rounded-md bg-transparent p-2 text-slate-200">
        <input
          type="text"
          placeholder="type some emojis"
          className="w-full border-none bg-transparent outline-none"
          value={emoji}
          onChange={(e) => setEmoji(e.target.value)}
          disabled={isPosting}
          onKeyDown={(e) => {
            if (e.key === "Enter") {
              e.preventDefault();
              if (emoji.length === 0) return;
              mutate({ content: emoji });
              setEmoji("");
            }
          }}
        />
        {emoji !== "" && (
          <button
            className="rounded-md bg-slate-200 px-2 py-1 text-slate-800 hover:cursor-pointer"
            onClick={() => {
              if (emoji.length === 0) return;
              mutate({ content: emoji });
              setEmoji("");
            }}
            disabled={emoji.length === 0 || isPosting}
          >
            Post
          </button>
        )}
        {isPosting && <LoadingSpinner size={20} />}
      </div>
    </div>
  );
};

const Feed = () => {
  const { data, isLoading: isLoadedPost } = api.post.getAll.useQuery();
  if (isLoadedPost) return <LoadingPage />;
  if (!data) return <div>no data found</div>;

  return (
    <div className="flex w-full flex-col">
      {[...data]?.map((fullPost) => (
        <PostView key={fullPost?.post?.id} {...fullPost} />
      ))}
    </div>
  );
};

export default function Home() {
  const { isLoaded: isUserLoaded } = useUser();

  if (!isUserLoaded) {
    return <div />;
  }
  //start faetching early
  api.post.getAll.useQuery();
  // console.log("data", data);

  return (
    <>
      <Head>
        <title>Twitter Emoji Clone</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        <div className="flex w-full items-center justify-start gap-5 border p-5 font-bold text-white">
          <SignedIn>
            <div>
              <UserButton />
            </div>
            <div>
              <CreatePostWizard />
            </div>
          </SignedIn>
          <SignedOut>
            <SignInButton />
          </SignedOut>
        </div>
        <Feed />
      </PageLayout>
    </>
  );
}
