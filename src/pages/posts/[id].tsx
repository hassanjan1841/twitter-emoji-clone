import Head from "next/head";
import { api } from "~/utils/api";
import type { GetStaticPropsContext, InferGetStaticPropsType } from "next";

import PageLayout from "~/components/PageLayout";

import PostView from "~/components/postView";
import { generateSSGHelper } from "~/server/helpers/ssgHelper";

type PageProps = InferGetStaticPropsType<typeof getStaticProps>;

export default function ProfilePage({ id }: PageProps) {
  const { data } = api.post.getPostById.useQuery({
    id,
  });

  if (!data) return <div>User not found</div>;

  return (
    <>
      <Head>
        <title>{`${data.post.content} : @${data.author.username}`}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        {/* <div className="relative h-48 w-full border-b border-slate-400 text-white"> */}
        <PostView post={data.post} author={data.author} />
        {/* </div> */}
      </PageLayout>
    </>
  );
}

export async function getStaticProps(context: GetStaticPropsContext) {
  const ssg = generateSSGHelper();

  const id = context.params?.id as string;

  if (typeof id !== "string") throw new Error("id is not a string");

  // This should be getPostById instead of getPostsByUserId
  await ssg.post.getPostById.prefetch({ id });

  return {
    props: {
      trpcState: ssg.dehydrate(),
      id,
    },
    revalidate: 1,
  };
}

export async function getStaticPaths() {
  return {
    paths: [],
    fallback: "blocking",
  };
}
